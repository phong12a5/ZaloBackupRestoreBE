// filepath: auth-service/src/main/java/io/bomtech/auth/service/AuthService.java
package io.bomtech.auth.service;

import io.bomtech.auth.model.User;
import io.bomtech.auth.repository.UserRepository;
import io.bomtech.auth.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value; // Import @Value
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Optional;

@Service
public class AuthService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Value("${user.service.url}") // Inject value from application.yml
    private String userServiceUrl; // Remove hardcoded value
    
    public void register(User user) {
        // Check if username already exists
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            throw new IllegalArgumentException("Username already exists");
        }
        // 1. Save user in auth-service database
        User savedUser = userRepository.save(user);

        // 2. Prepare user data for user-service (without password)
        io.bomtech.auth.model.User userServiceUser = new io.bomtech.auth.model.User();
        userServiceUser.setId(savedUser.getId()); // Use the ID generated by MongoDB
        userServiceUser.setUsername(savedUser.getUsername());
        userServiceUser.setEmail(savedUser.getEmail());

        // 3. Send user data to user-service asynchronously
        webClientBuilder.build()
                .post()
                .uri(userServiceUrl + "/users")
                .body(Mono.just(userServiceUser), io.bomtech.auth.model.User.class)
                .retrieve()
                .bodyToMono(Void.class) // Or handle response if needed
                .doOnError(error -> System.err.println("Failed to send user to user-service: " + error.getMessage()))
                .subscribe(); // Subscribe to trigger the request
    }

    public boolean login(User user) {
        return userRepository.findByUsername(user.getUsername())
        .filter(u -> u.getPassword().equals(user.getPassword()))
        .isPresent();
    }

    public String generateRefreshToken(String username) {
        return jwtUtil.generateRefreshToken(username);
    }

    // Add this method
    public Optional<User> findUserByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}